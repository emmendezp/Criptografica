# -*- coding: utf-8 -*-
"""Cifrado de Hill.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nUzRVtf-AQ_lTenL5UZKtZeKN8MArN3W
"""

import string
import numpy as np
import re

def mod26(Entrada):
  Entrada = re.sub("[^a-zA-z]", "", Entrada)
  Entrada = Entrada.upper()# entrada en mayuscula
  arr = np.array([ord(i) - ord('A') for i in Entrada], dtype=int)
  if len(arr)%2==1:
    arr= np.append(arr,[0])
  return arr
  
def inversaMod(a, m):
  g, x, y = egcd(a, m)
  if g != 1:
    raise Exception('El inverso modulo 26 para este valor no existe')
  else:
    return x % m

def egcd(a, b):
  if a == 0:
    return (b, 0, 1)
  else:
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)

def inversaMod26(matrix):
  ct= (np.linalg.inv(matrix).T * np.linalg.det(matrix)).T
  det= int(np.linalg.det(matrix)%26)
  invdet= inversaMod(det,26)
  invermod26= np.matrix(ct*invdet%26)
  print(invermod26)
  return invermod26
  
def cifrar(matrix, arr):

  cipher= ''
  for i in range(0,len(arr)-1,2):
    pair= np.array([arr[i], arr[i+1]])
    number= np.array( pair* matrix%26)
    cipher += chr(int(str(number[0][0])) + ord('a'))+chr(int(str(number[0][1])) + ord('a'))
  return cipher.upper()
  
def Descifrar(matrix, arr):
  mensaje_c= ''
  minv = inversaMod26(matrix)

  for i in range(0,len(arr)-1,2):
    pair= np.array([arr[i], arr[i+1]])
    number= np.array( pair* minv%26, dtype='int')
    mensaje_c += chr(int(str(number[0][0])) + ord('a'))+chr(int(str(number[0][1])) + ord('a'))
  return mensaje_c.upper()

def main():
    print("****************Cifrado Hill***************")
    print("1. Cifrar")
    print("2. Descifrar")
    print("**********************************************")
    opcion = int(input('\n-Opcion -> '))
    m=int(input('- Ingrese el tamaÃ±o de la matrix -> : '))
    A = np.ones((m,m),np.int16)
    for i in range(m):
      fila= list(map(int,input(f"- Ingresa fila {i+1}: ").split()))
      A[i]=fila    

    #creacion de matriz con los datos ingresados 
    key= np.matrix([A[0],A[1]])
    print("\n- La matriz es ->\n ",key)


    if opcion == 1: #opcion cifrado
       Entrada= str(input("-Ingrese mensaje a crifrar -> : "))
       Entrada_int= mod26(Entrada)
       cipher = cifrar(key,Entrada_int)
       print("El mensaje cifrado es:", cipher)
    
    elif opcion == 2:#Opcion descifrado 
      cipher_m= input("- Ingrese el mensaje a descifrar -> : ")
      print("************************************************")
      print("- La matriz inversa modular es -> :")
      cipher_int= mod26(cipher_m)
      message=Descifrar(key,cipher_int)
      print("- El mensaje descifrado es ->:", message)
      
if __name__ == "__main__":
   main()